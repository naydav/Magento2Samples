<?="<?php\n"?>
declare(strict_types=1);

namespace <?=$data['namespace']?>\Controller\Adminhtml\<?=$data['entity_class_name']?>;

use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>Interface;
use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>InterfaceFactory;
use <?=$data['namespace']?>\Api\<?=$data['entity_class_name']?>RepositoryInterface;
use Magento\Backend\App\Action;
use Magento\Backend\App\Action\Context;
use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\Controller\Result\Redirect;
use Magento\Framework\Controller\ResultInterface;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Validation\ValidationException;

/**
 * @author naydav <valeriy.nayda@gmail.com>
 */
class Save extends Action
{
    /**
     * @see _isAllowed()
     */
    const ADMIN_RESOURCE = '<?=$data['acl_resource']?>::<?=$data['entity_acl_resource']?>';

    /**
     * @var <?=$data['entity_class_name']?>InterfaceFactory
     */
    private $<?=lcfirst($data['entity_class_name'])?>Factory;

    /**
     * @var <?=$data['entity_class_name']?>RepositoryInterface
     */
    private $<?=lcfirst($data['entity_class_name'])?>Repository;

    /**
     * @var DataObjectHelper
     */
    private $dataObjectHelper;

    /**
     * @param Context $context
     * @param <?=$data['entity_class_name']?>InterfaceFactory $<?=lcfirst($data['entity_class_name'])?>Factory
     * @param <?=$data['entity_class_name']?>RepositoryInterface $<?=lcfirst($data['entity_class_name'])?>Repository
     * @param DataObjectHelper $dataObjectHelper
     */
    public function __construct(
        Context $context,
        <?=$data['entity_class_name']?>InterfaceFactory $<?=lcfirst($data['entity_class_name'])?>Factory,
        <?=$data['entity_class_name']?>RepositoryInterface $<?=lcfirst($data['entity_class_name'])?>Repository,
        DataObjectHelper $dataObjectHelper
    ) {
        parent::__construct($context);
        $this-><?=lcfirst($data['entity_class_name'])?>Factory = $<?=lcfirst($data['entity_class_name'])?>Factory;
        $this-><?=lcfirst($data['entity_class_name'])?>Repository = $<?=lcfirst($data['entity_class_name'])?>Repository;
        $this->dataObjectHelper = $dataObjectHelper;
    }

    /**
     * @inheritdoc
     */
    public function execute(): ResultInterface
    {
        $resultRedirect = $this->resultRedirectFactory->create();
        $requestData = $this->getRequest()->getParams();

        if (false === $this->getRequest()->isPost() || null == $requestData || empty($requestData['general'])) {
            $this->messageManager->addErrorMessage(__('Wrong request.'));
            $resultRedirect->setPath('*/*');
            return $resultRedirect;
        }

        $<?=$data['entity_camelcase_id_field']?> = isset($requestData['general'][<?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?>])
            ? (int)$requestData['general'][<?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?>]
            : null;

        try {
            $<?=$data['entity_camelcase_id_field']?> = $this->processSave($requestData, $<?=$data['entity_camelcase_id_field']?>);

            $this->messageManager->addSuccessMessage(__('The <?=$data['entity_display_name']?> has been saved.'));
            $this->processRedirectAfterSuccessSave($resultRedirect, $<?=$data['entity_camelcase_id_field']?>);
        } catch (NoSuchEntityException $e) {
            $this->messageManager->addErrorMessage(__('The <?=$data['entity_display_name']?> does not exist.'));
            $this->processRedirectAfterFailureSave($resultRedirect);
        } catch (ValidationException $e) {
            foreach ($e->getErrors() as $localizedError) {
                $this->messageManager->addErrorMessage($localizedError->getMessage());
            }
            $this->processRedirectAfterFailureSave($resultRedirect, $<?=$data['entity_camelcase_id_field']?>);
        } catch (CouldNotSaveException $e) {
            $this->messageManager->addErrorMessage($e->getMessage());
            $this->processRedirectAfterFailureSave($resultRedirect, $<?=$data['entity_camelcase_id_field']?>);
        }
        return $resultRedirect;
    }

    /**
     * @param array $requestData
     * @param int|null $<?=$data['entity_camelcase_id_field']?><?="\n"?>
     * @return int
     */
    private function processSave(array $requestData, int $<?=$data['entity_camelcase_id_field']?> = null): int
    {
        if (null === $<?=$data['entity_camelcase_id_field']?>) {
            /** @var $<?=$data['entity_class_name']?>Interface $<?=lcfirst($data['entity_class_name'])?> */
            $<?=lcfirst($data['entity_class_name'])?> = $this-><?=lcfirst($data['entity_class_name'])?>Factory->create();
        } else {
            $<?=lcfirst($data['entity_class_name'])?> = $this-><?=lcfirst($data['entity_class_name'])?>Repository->get($<?=$data['entity_camelcase_id_field']?>);
        }
        $this->dataObjectHelper->populateWithArray($<?=lcfirst($data['entity_class_name'])?>, $requestData['general'], <?=$data['entity_class_name']?>Interface::class);

        // event is needed for populating entity with custom data from form
        $this->_eventManager->dispatch(
            'controller_action_<?=$data['name']?>_<?=lcfirst($data['entity_class_name'])?>_save_entity_before',
            [
                'request' => $this->getRequest(),
                '<?=lcfirst($data['entity_class_name'])?>' => $<?=lcfirst($data['entity_class_name'])?>,
            ]
        );
        $<?=$data['entity_camelcase_id_field']?> = $this-><?=lcfirst($data['entity_class_name'])?>Repository->save($<?=lcfirst($data['entity_class_name'])?>);

        // event is needed for processing form data by several services
        $this->_eventManager->dispatch(
            'controller_action_<?=$data['name']?>_<?=lcfirst($data['entity_class_name'])?>_save_entity_after',
            [
                'request' => $this->getRequest(),
                '<?=lcfirst($data['entity_class_name'])?>' => $<?=lcfirst($data['entity_class_name'])?>,
            ]
        );
        return $<?=$data['entity_camelcase_id_field']?>;
    }

    /**
     * @param Redirect $resultRedirect
     * @param int $<?=$data['entity_camelcase_id_field']?><?="\n"?>
     * @return void
     */
    private function processRedirectAfterSuccessSave(Redirect $resultRedirect, int $<?=$data['entity_camelcase_id_field']?>)
    {
        if ($this->getRequest()->getParam('back')) {
            $resultRedirect->setPath('*/*/edit', [
                <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
                '_current' => true,
            ]);
        } elseif ($this->getRequest()->getParam('redirect_to_new')) {
            $resultRedirect->setPath('*/*/new', [
                '_current' => true,
            ]);
        } else {
            $resultRedirect->setPath('*/*/');
        }
    }

    /**
     * @param Redirect $resultRedirect
     * @param int|null $<?=$data['entity_camelcase_id_field']?><?="\n"?>
     * @return void
     */
    private function processRedirectAfterFailureSave(Redirect $resultRedirect, int $<?=$data['entity_camelcase_id_field']?> = null)
    {
        if (null === $<?=$data['entity_camelcase_id_field']?>) {
            $resultRedirect->setPath('*/*/new');
        } else {
            $resultRedirect->setPath('*/*/edit', [
                <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
                '_current' => true,
            ]);
        }
    }
}
