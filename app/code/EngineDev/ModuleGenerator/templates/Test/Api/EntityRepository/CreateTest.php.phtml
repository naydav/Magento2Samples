<?="<?php\n"?>
declare(strict_types=1);

namespace <?=$data['namespace']?>\Test\Api\<?=$data['entity_class_name']?>Repository;

use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>Interface;
use <?=$data['namespace']?>\Api\<?=$data['entity_class_name']?>RepositoryInterface;
use Magento\Framework\Webapi\Rest\Request;
use Magento\TestFramework\Assert\AssertArrayContains;
use Magento\TestFramework\Helper\Bootstrap;
use Magento\TestFramework\TestCase\WebapiAbstract;

/**
 * @author naydav <valeriy.nayda@gmail.com>
 */
class CreateTest extends WebapiAbstract
{
    /**#@+
     * Service constants
     */
    const RESOURCE_PATH = '/V1/<?=$data['route_front_name']?>/<?=$data['entity_webapi_front_name']?>';
    const SERVICE_NAME = '<?=lcfirst($data['name_camelcase'])?><?=$data['entity_class_name']?>RepositoryV1';
    /**#@-*/

    /**
     * @var <?=$data['entity_class_name']?>RepositoryInterface
     */
    private $<?=lcfirst($data['entity_class_name'])?>Repository;

    /**
     * @var int
     */
    private $<?=$data['entity_camelcase_id_field']?>;

    protected function setUp()
    {
        parent::setUp();
        $this-><?=lcfirst($data['entity_class_name'])?>Repository = Bootstrap::getObjectManager()->get(<?=$data['entity_class_name']?>RepositoryInterface::class);
    }

    public function testCreate()
    {
        $expectedData = [
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']):?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => true,
<?php elseif ('string' === $field['type']):?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => '<?=$data['entity_class_name']?>-<?=$field['camelcase']?>',
<?php elseif ('int' === $field['type']):?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => 100,
<?php endif;?>
<?php endforeach; ?>
        ];
        $serviceInfo = [
            'rest' => [
                'resourcePath' => self::RESOURCE_PATH,
                'httpMethod' => Request::HTTP_METHOD_POST,
            ],
            'soap' => [
                'service' => self::SERVICE_NAME,
                'operation' => self::SERVICE_NAME . 'Save',
            ],
        ];
        $<?=$data['entity_camelcase_id_field']?> = $this->_webApiCall($serviceInfo, ['<?=lcfirst($data['entity_class_name'])?>' => $expectedData]);

        self::assertNotEmpty($<?=$data['entity_camelcase_id_field']?>);
        $this-><?=$data['entity_camelcase_id_field']?> = $<?=$data['entity_camelcase_id_field']?>;
        AssertArrayContains::assert($expectedData, $this->get<?=$data['entity_class_name']?>DataById($<?=$data['entity_camelcase_id_field']?>));
    }

    protected function tearDown()
    {
        if (null !== $this-><?=$data['entity_camelcase_id_field']?>) {
            $this-><?=lcfirst($data['entity_class_name'])?>Repository->deleteById($this-><?=$data['entity_camelcase_id_field']?>);
        }
        parent::tearDown();
    }

    /**
     * @param int $<?=$data['entity_camelcase_id_field']?><?="\n"?>
     * @return array
     */
    private function get<?=$data['entity_class_name']?>DataById(int $<?=$data['entity_camelcase_id_field']?>): array
    {
        $serviceInfo = [
            'rest' => [
                'resourcePath' => self::RESOURCE_PATH . '/' . $<?=$data['entity_camelcase_id_field']?>,
                'httpMethod' => Request::HTTP_METHOD_GET,
            ],
            'soap' => [
                'service' => self::SERVICE_NAME,
                'operation' => self::SERVICE_NAME . 'Get',
            ],
        ];
        $response = (TESTS_WEB_API_ADAPTER == self::ADAPTER_REST)
            ? $this->_webApiCall($serviceInfo)
            : $this->_webApiCall($serviceInfo, ['<?=$data['entity_camelcase_id_field']?>' => $<?=$data['entity_camelcase_id_field']?>]);

        self::assertArrayHasKey(<?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?>, $response);
        self::assertEquals($<?=$data['entity_camelcase_id_field']?>, $response[<?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?>]);
        return $response;
    }
}
