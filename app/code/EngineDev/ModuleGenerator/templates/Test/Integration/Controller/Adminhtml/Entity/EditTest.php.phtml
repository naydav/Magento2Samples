<?="<?php\n"?>
declare(strict_types=1);

namespace <?=$data['namespace']?>\Test\Integration\Controller\Adminhtml\<?=$data['entity_class_name']?>;

use Engine\Test\Backend\AssertFormField;
use Engine\Test\AssertPageHeader;
use Engine\Test\AssertPageTitle;
use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>Interface;
use Magento\Framework\Message\MessageInterface;
use Magento\TestFramework\TestCase\AbstractBackendController;
use Zend\Http\Response;

/**
 * @author naydav <valeriy.nayda@gmail.com>
 * @magentoAppArea adminhtml
 */
class EditTest extends AbstractBackendController
{
    /**
     * Request uri
     */
    const REQUEST_URI = 'backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>/edit';

    /**
     * @var string
     */
    private $formName = '<?=$data['entity_ui_name']?>_form';

    /**
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testEdit()
    {
        $<?=$data['entity_camelcase_id_field']?> = 100;
        $title = '<?=$data['entity_class_name']?>-name-100';

        $this->dispatch(
            self::REQUEST_URI . '/' . <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> . '/'
            . $<?=$data['entity_camelcase_id_field']?> . '/'
        );
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());
        $this->assertSessionMessages($this->isEmpty(), MessageInterface::TYPE_ERROR);

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        AssertPageTitle::assert($body, __('Edit <?=$data['entity_display_name']?>: %1', $title));
        AssertPageHeader::assert($body, __('Edit <?=$data['entity_display_name']?>: %1', $title));

<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']):?>
        AssertFormField::assert($body, $this->formName, 'general', <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?>, true);
<?php elseif ('string' === $field['type']):?>
        AssertFormField::assert(
            $body,
            $this->formName,
            'general',
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?>,
            <?php if ('title' === $field['camelcase']): ?>$title<?php else: ?>'<?=$data['entity_class_name']?>-<?=$field['camelcase']?>-100'<?php endif; ?><?="\n"?>
        );
<?php elseif ('int' === $field['type']): ?>
        AssertFormField::assert($body, $this->formName, 'general', <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?>, 100);
<?php endif;?>
<?php endforeach; ?>
    }

    public function testEditWithNotExistEntityId()
    {
        $<?=$data['entity_camelcase_id_field']?> = -1;

        $this->dispatch(
            self::REQUEST_URI . '/' . <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> . '/'
            . $<?=$data['entity_camelcase_id_field']?> . '/'
        );

        self::assertEquals(Response::STATUS_CODE_302, $this->getResponse()->getStatusCode());
        $this->assertRedirect($this->stringContains('backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>'));
        $this->assertSessionMessages(
            $this->contains('<?=$data['entity_display_name']?> with id &quot;-1&quot; does not exist.'),
            MessageInterface::TYPE_ERROR
        );
    }
}
