<?="<?php\n"?>
declare(strict_types=1);

namespace <?=$data['namespace']?>\Test\Integration\Controller\Adminhtml\<?=$data['entity_class_name']?>\Save;

use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>Interface;
use Magento\Framework\Data\Form\FormKey;
use Magento\Framework\Message\MessageInterface;
use Magento\TestFramework\TestCase\AbstractBackendController;
use Zend\Http\Request;
use Zend\Http\Response;

/**
 * @author naydav <valeriy.nayda@gmail.com>
 * @magentoAppArea adminhtml
 */
class ValidationTest extends AbstractBackendController
{
    /**
     * Request uri
     */
    const REQUEST_URI = 'backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>/save';

    /**
     * @var FormKey
     */
    private $formKey;

    public function setUp()
    {
        parent::setUp();
        $this->formKey = $this->_objectManager->get(FormKey::class);
    }

    /**
     * @param string $field
     * @param string $value
     * @param string $errorMessage
     * @dataProvider failedValidationDataProvider
     */
    public function testFailedValidationOnCreate(string $field, string $value, string $errorMessage)
    {
        $data = [
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']):?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => true,
<?php elseif ('string' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => '<?=$data['entity_class_name']?>-<?=$field['camelcase']?>',
<?php elseif ('int' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => 100,
<?php endif;?>
<?php endforeach; ?>
        ];
        $data[$field] = $value;

        $request = $this->getRequest();
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'general' => $data,
        ]);
        $this->dispatch(self::REQUEST_URI);

        self::assertEquals(Response::STATUS_CODE_302, $this->getResponse()->getStatusCode());
        $this->assertRedirect($this->stringContains('backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>'));
        $this->assertSessionMessages($this->contains($errorMessage), MessageInterface::TYPE_ERROR);
    }

    /**
     * @param string $field
     * @param string $value
     * @param string $errorMessage
     * @dataProvider failedValidationDataProvider
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testFailedValidationOnUpdate(string $field, string $value, string $errorMessage)
    {
        $<?=$data['entity_camelcase_id_field']?> = 100;
        $data = [
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => false,
<?php elseif ('string' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => '<?=$data['entity_class_name']?>-<?=$field['camelcase']?>-updated',
<?php elseif ('int' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => 100,
<?php endif;?>
<?php endforeach; ?>
        ];
        $data[$field] = $value;

        $request = $this->getRequest();
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'general' => $data,
        ]);
        $this->dispatch(self::REQUEST_URI);

        self::assertEquals(Response::STATUS_CODE_302, $this->getResponse()->getStatusCode());
        $this->assertRedirect($this->stringContains('backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>'));
        $this->assertSessionMessages($this->contains($errorMessage), MessageInterface::TYPE_ERROR);
    }

    /**
     * @return array
     */
    public function failedValidationDataProvider(): array
    {
        return [
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if (isset($field['required']) && $field['required']): ?>
            'empty_<?=$field['name']?>' => [
                <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?>,
                '',
                '&quot;' . <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> . '&quot; can not be empty.',
            ],
<?php endif;?>
<?php endforeach; ?>
        ];
    }
}
