<?="<?php\n"?>
declare(strict_types=1);

namespace <?=$data['namespace']?>\Test\Integration\Controller\Adminhtml\<?=$data['entity_class_name']?>;

use <?=$data['namespace']?>\Api\Data\<?=$data['entity_class_name']?>Interface;
use <?=$data['namespace']?>\Api\<?=$data['entity_class_name']?>RepositoryInterface;
use Engine\Test\AssertArrayContains;
use Magento\Framework\Data\Form\FormKey;
use Magento\Framework\EntityManager\HydratorInterface;
use Magento\TestFramework\TestCase\AbstractBackendController;
use Zend\Http\Request;
use Zend\Http\Response;

/**
 * @author naydav <valeriy.nayda@gmail.com>
 * @magentoAppArea adminhtml
 */
class InlineEditTest extends AbstractBackendController
{
    /**
     * Request uri
     */
    const REQUEST_URI = 'backend/<?=$data['route_front_name']?>/<?=lcfirst($data['entity_class_name'])?>/inlineEdit';

    /**
     * @var FormKey
     */
    private $formKey;

    /**
     * @var HydratorInterface
     */
    private $hydrator;

    /**
     * @var <?=$data['entity_class_name']?>RepositoryInterface
     */
    private $<?=lcfirst($data['entity_class_name'])?>Repository;

    public function setUp()
    {
        parent::setUp();
        $this->formKey = $this->_objectManager->get(FormKey::class);
        $this->hydrator = $this->_objectManager->get(HydratorInterface::class);
        $this-><?=lcfirst($data['entity_class_name'])?>Repository = $this->_objectManager->get(
            <?=$data['entity_class_name']?>RepositoryInterface::class
        );
    }

    /**
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testInlineEdit()
    {
        $<?=$data['entity_camelcase_id_field']?> = 100;
        $itemData = [
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => false,
<?php elseif ('string' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => '<?=$data['entity_class_name']?>-<?=$field['camelcase']?>-inline-edit',
<?php elseif ('int' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => 200,
<?php endif;?>
<?php endforeach; ?>
        ];

        $request = $this->getRequest();
        $request->getHeaders()->addHeaderLine('X_REQUESTED_WITH', 'XMLHttpRequest');
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [
                $itemData,
            ],
        ]);

        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(0, $jsonResponse->error);
        self::assertEmpty($jsonResponse->messages);

        $<?=lcfirst($data['entity_class_name'])?> = $this-><?=lcfirst($data['entity_class_name'])?>Repository->get($<?=$data['entity_camelcase_id_field']?>);
        AssertArrayContains::assert($itemData, $this->hydrator->extract($<?=lcfirst($data['entity_class_name'])?>));
    }

    public function testInlineEditWithNotExistEntityId()
    {
        $<?=$data['entity_camelcase_id_field']?> = -1;

        $request = $this->getRequest();
        $request->getHeaders()->addHeaderLine('X_REQUESTED_WITH', 'XMLHttpRequest');
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [
                [
                    <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
                ],
            ],
        ]);

        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(1, $jsonResponse->error);
        self::assertContains(
            "[ID: {$<?=$data['entity_camelcase_id_field']?>}] The <?=$data['entity_display_name']?> does not exist.",
            $jsonResponse->messages
        );
    }

    public function testInlineEditWithEmptyItems()
    {
        $request = $this->getRequest();
        $request->getHeaders()->addHeaderLine('X_REQUESTED_WITH', 'XMLHttpRequest');
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [],
        ]);

        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(1, $jsonResponse->error);
        self::assertContains('Please correct the data sent.', $jsonResponse->messages);
    }

    /**
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testInlineEditNoAjaxRequest()
    {
        $request = $this->getRequest();
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [
                [
                    <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => 100,
                ],
            ],
        ]);

        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(1, $jsonResponse->error);
        self::assertContains('Please correct the data sent.', $jsonResponse->messages);
    }

    /**
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testInlineEditWithWrongRequestMethod()
    {
        $request = $this->getRequest();
        $request->getHeaders()->addHeaderLine('X_REQUESTED_WITH', 'XMLHttpRequest');
        $request->setMethod(Request::METHOD_GET);
        $request->setQueryValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [
                [
                    <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => 100,
                ],
            ],
        ]);

        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(1, $jsonResponse->error);
        self::assertContains('Please correct the data sent.', $jsonResponse->messages);
    }

    /**
     * @param string $field
     * @param string $value
     * @param string $errorMessage
     * @dataProvider failedValidationDataProvider
     * @magentoDataFixture ../../../../app/code/<?=$data['namespace_prefix']?>/<?=$data['name_camelcase']?>/Test/_files/<?=$data['entity_name']?>.php
     */
    public function testFailedValidation(string $field, string $value, string $errorMessage)
    {
        $<?=$data['entity_camelcase_id_field']?> = 100;
        $itemData = [
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($data['entity_id_field'])?> => $<?=$data['entity_camelcase_id_field']?>,
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if ($field['name'] === $data['entity_id_field']) { continue; } ?>
<?php if ('bool' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => false,
<?php elseif ('string' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => '<?=$data['entity_class_name']?>-<?=$field['camelcase']?>-inline-edit',
<?php elseif ('int' === $field['type']): ?>
            <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> => 100,
<?php endif;?>
<?php endforeach; ?>
        ];
        $itemData[$field] = $value;

        $request = $this->getRequest();
        $request->getHeaders()->addHeaderLine('X_REQUESTED_WITH', 'XMLHttpRequest');
        $request->setMethod(Request::METHOD_POST);
        $request->setPostValue([
            'form_key' => $this->formKey->getFormKey(),
            'items' => [
                $itemData,
            ],
        ]);
        $this->dispatch(self::REQUEST_URI);
        self::assertEquals(Response::STATUS_CODE_200, $this->getResponse()->getStatusCode());

        $body = $this->getResponse()->getBody();
        self::assertNotEmpty($body);

        $jsonResponse = json_decode($body);
        self::assertNotEmpty($jsonResponse);
        self::assertEquals(1, $jsonResponse->error);
        self::assertContains($errorMessage, $jsonResponse->messages);
    }

    /**
     * @return array
     */
    public function failedValidationDataProvider(): array
    {
        return [
<?php foreach ($data['entity_fields'] as $field): ?>
<?php if (isset($field['required']) && $field['required']): ?>
            'empty_<?=$field['name']?>' => [
                <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?>,
                '',
                '[ID: 100] "' . <?=$data['entity_class_name']?>Interface::<?=strtoupper($field['name'])?> . '" can not be empty.',
            ],
<?php endif;?>
<?php endforeach; ?>
        ];
    }
}
